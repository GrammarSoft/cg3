/* Generated by re2c 0.10.6 on Sat Oct 28 22:49:37 2006 */
/*
 * Copyright (C) 2006, GrammarSoft Aps
 * and the VISL project at the University of Southern Denmark.
 * All Rights Reserved.
 *
 * The contents of this file are subject to the GrammarSoft Public
 * License Version 1.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.grammarsoft.com/GSPL or
 * http://visl.sdu.dk/GSPL.txt
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 */

#include "stdafx.h"
#include "Strings.h"
#include <unicode/uregex.h>
#include "GrammarParser.h"
#include "Grammar.h"
#include "uextras.h"
#include <sys/stat.h>

using namespace CG3;
using namespace CG3::Strings;



#define YYCURSOR        input

YYCTYPE *GrammarParser::re2c_skipline(YYCTYPE *input) {
skipline_start:

{
	YYCTYPE yych;

	yych = *YYCURSOR;
	if(yych <= 0x000C) {
		if(yych <= 0x0009) {
			if(yych >= 0x0001) goto yy6;
		} else {
			if(yych == 0x000B) goto yy6;
			goto yy4;
		}
	} else {
		if(yych <= 0x0085) {
			if(yych <= 0x0084) goto yy6;
			goto yy4;
		} else {
			if(yych <= 0x2027) goto yy6;
			if(yych <= 0x2029) goto yy4;
			goto yy6;
		}
	}
	++YYCURSOR;
	{goto skipline_end;}
yy4:
	++YYCURSOR;
	{result->lines++; goto skipline_end;}
yy6:
	++YYCURSOR;
	{goto skipline_start;}
}

skipline_end:
	return YYCURSOR;
}

YYCTYPE *GrammarParser::re2c_parseTagList(YYCTYPE *input, Set *set) {
parseTagList_start:

{
	YYCTYPE yych;
	yych = *YYCURSOR;
	if(yych <= ' ') {
		if(yych <= 0x000A) {
			if(yych <= 0x0000) goto yy10;
			if(yych <= 0x0008) goto yy14;
			if(yych <= 0x0009) goto yy16;
			goto yy12;
		} else {
			if(yych <= 0x000C) {
				if(yych <= 0x000B) goto yy16;
				goto yy12;
			} else {
				if(yych <= 0x000D) goto yy16;
				if(yych <= 0x001B) goto yy14;
				goto yy16;
			}
		}
	} else {
		if(yych <= '\\') {
			if(yych == '#') goto yy18;
			if(yych <= '[') goto yy14;
			goto yy19;
		} else {
			if(yych <= 0x0085) {
				if(yych <= 0x0084) goto yy14;
				goto yy12;
			} else {
				if(yych <= 0x2027) goto yy14;
				if(yych <= 0x2029) goto yy12;
				goto yy14;
			}
		}
	}
yy10:
	++YYCURSOR;
	if((yych = *YYCURSOR) <= 0x000C) {
		if(yych <= 0x0009) {
			if(yych <= 0x0008) goto yy20;
		} else {
			if(yych != 0x000B) goto yy20;
		}
	} else {
		if(yych <= ' ') {
			if(yych <= 0x000D) goto yy11;
			if(yych <= 0x001B) goto yy20;
		} else {
			if(yych == ';') goto yy22;
			goto yy20;
		}
	}
yy11:
	{goto parseTagList_end;}
yy12:
	++YYCURSOR;
	if((yych = *YYCURSOR) <= 0x000C) {
		if(yych <= 0x0009) {
			if(yych <= 0x0008) goto yy20;
		} else {
			if(yych != 0x000B) goto yy20;
		}
	} else {
		if(yych <= ' ') {
			if(yych <= 0x000D) goto yy13;
			if(yych <= 0x001B) goto yy20;
		} else {
			if(yych == ';') goto yy22;
			goto yy20;
		}
	}
yy13:
	{result->lines++; goto parseTagList_start;}
yy14:
	++YYCURSOR;
	if((yych = *YYCURSOR) == ';') goto yy22;
	goto yy21;
yy15:
	{set=set;}
yy16:
	++YYCURSOR;
	if((yych = *YYCURSOR) == ';') goto yy24;
	{goto parseTagList_start;}
yy18:
	yych = *++YYCURSOR;
	if(yych == ';') goto yy22;
	goto yy21;
yy19:
	yych = *++YYCURSOR;
	goto yy21;
yy20:
	++YYCURSOR;
	yych = *YYCURSOR;
yy21:
	if(yych <= 0x000B) {
		if(yych == 0x0009) goto yy15;
		if(yych <= 0x000A) goto yy20;
		goto yy15;
	} else {
		if(yych <= 0x000D) {
			if(yych <= 0x000C) goto yy20;
			goto yy15;
		} else {
			if(yych <= 0x001B) goto yy20;
			if(yych <= ' ') goto yy15;
			goto yy20;
		}
	}
yy22:
	++YYCURSOR;
	if((yych = *YYCURSOR) <= 0x000B) {
		if(yych == 0x0009) goto yy23;
		if(yych <= 0x000A) goto yy20;
	} else {
		if(yych <= 0x000D) {
			if(yych <= 0x000C) goto yy20;
		} else {
			if(yych <= 0x001B) goto yy20;
			if(yych >= '!') goto yy20;
		}
	}
yy23:
	{goto parseTagList_end;}
yy24:
	++YYCURSOR;
	yych = *YYCURSOR;
	goto yy23;
}


parseTagList_end:
	return YYCURSOR;
}

YYCTYPE *GrammarParser::re2c_parseDelimiters(YYCTYPE *input) {
	CG3::Set *curset = result->allocateSet();
	curset->setName(stringbits[S_DELIMITSET]);
	curset->line = result->lines;

parseDelimiters_start:

{
	YYCTYPE yych;
	yych = *YYCURSOR;
	if(yych <= '<') {
		if(yych <= 0x000B) {
			if(yych <= 0x0000) goto yy27;
			if(yych == 0x000A) goto yy29;
			goto yy31;
		} else {
			if(yych <= 0x000C) goto yy29;
			if(yych == '#') goto yy33;
			goto yy31;
		}
	} else {
		if(yych <= 0x0084) {
			if(yych <= '=') goto yy35;
			if(yych == '\\') goto yy37;
			goto yy31;
		} else {
			if(yych <= 0x0085) goto yy29;
			if(yych <= 0x2027) goto yy31;
			if(yych <= 0x2029) goto yy29;
			goto yy31;
		}
	}
yy27:
	++YYCURSOR;
	if((yych = *YYCURSOR) == ';') goto yy38;
	{goto parseDelimiters_end;}
yy29:
	++YYCURSOR;
	if((yych = *YYCURSOR) == ';') goto yy38;
	{result->lines++; goto parseDelimiters_start;}
yy31:
	++YYCURSOR;
	if((yych = *YYCURSOR) == ';') goto yy38;
yy32:
	{goto parseDelimiters_start;}
yy33:
	++YYCURSOR;
	if((yych = *YYCURSOR) == ';') goto yy38;
	{YYCURSOR = re2c_skipline(YYCURSOR); goto parseDelimiters_start;}
yy35:
	++YYCURSOR;
	if((yych = *YYCURSOR) == ';') goto yy38;
	{YYCURSOR = re2c_parseTagList(YYCURSOR, curset); goto parseDelimiters_end;}
yy37:
	yych = *++YYCURSOR;
	goto yy32;
yy38:
	++YYCURSOR;
	{goto parseDelimiters_end;}
}


parseDelimiters_end:
	result->addSet(curset);
	result->delimiters = curset;
	return YYCURSOR;
}

KEYWORDS GrammarParser::re2c_scan(YYCTYPE *input) {
	YYCTYPE *YYMARKER = 0;
	KEYWORDS retval = K_IGNORE;
	
scanstart:

{
	YYCTYPE yych;
	yych = *YYCURSOR;
	if(yych <= 'R') {
		if(yych <= '"') {
			if(yych <= 0x000A) {
				if(yych <= 0x0000) goto yy42;
				if(yych <= 0x0009) goto yy52;
				goto yy44;
			} else {
				if(yych == 0x000C) goto yy44;
				goto yy52;
			}
		} else {
			if(yych <= 'D') {
				if(yych <= '#') goto yy50;
				if(yych <= 'C') goto yy52;
				goto yy46;
			} else {
				if(yych == 'L') goto yy49;
				goto yy52;
			}
		}
	} else {
		if(yych <= 'r') {
			if(yych <= 'd') {
				if(yych <= 'S') goto yy48;
				if(yych <= 'c') goto yy52;
				goto yy46;
			} else {
				if(yych == 'l') goto yy49;
				goto yy52;
			}
		} else {
			if(yych <= 0x0085) {
				if(yych <= 's') goto yy48;
				if(yych <= 0x0084) goto yy52;
				goto yy44;
			} else {
				if(yych <= 0x2027) goto yy52;
				if(yych <= 0x2029) goto yy44;
				goto yy52;
			}
		}
	}
yy42:
	++YYCURSOR;
	{return K_IGNORE;}
yy44:
	++YYCURSOR;
	{result->lines++; goto scanstart;}
yy46:
	yych = *(YYMARKER = ++YYCURSOR);
	if(yych == 'E') goto yy63;
	if(yych == 'e') goto yy63;
yy47:
	{goto scanstart;}
yy48:
	yych = *(YYMARKER = ++YYCURSOR);
	if(yych == 'E') goto yy58;
	if(yych == 'e') goto yy58;
	goto yy47;
yy49:
	yych = *(YYMARKER = ++YYCURSOR);
	if(yych == 'I') goto yy53;
	if(yych == 'i') goto yy53;
	goto yy47;
yy50:
	++YYCURSOR;
	{YYCURSOR = re2c_skipline(YYCURSOR); goto scanstart;}
yy52:
	yych = *++YYCURSOR;
	goto yy47;
yy53:
	yych = *++YYCURSOR;
	if(yych == 'S') goto yy55;
	if(yych == 's') goto yy55;
yy54:
	YYCURSOR = YYMARKER;
	goto yy47;
yy55:
	yych = *++YYCURSOR;
	if(yych == 'T') goto yy56;
	if(yych != 't') goto yy54;
yy56:
	++YYCURSOR;
	{retval = K_LIST; goto scanend;}
yy58:
	yych = *++YYCURSOR;
	if(yych == 'T') goto yy59;
	if(yych != 't') goto yy54;
yy59:
	++YYCURSOR;
	if((yych = *YYCURSOR) == 'S') goto yy61;
	if(yych == 's') goto yy61;
	{retval = K_SET; goto scanend;}
yy61:
	++YYCURSOR;
	{retval = K_SETS; goto scanend;}
yy63:
	yych = *++YYCURSOR;
	if(yych == 'L') goto yy64;
	if(yych != 'l') goto yy54;
yy64:
	yych = *++YYCURSOR;
	if(yych == 'I') goto yy65;
	if(yych != 'i') goto yy54;
yy65:
	yych = *++YYCURSOR;
	if(yych == 'M') goto yy66;
	if(yych != 'm') goto yy54;
yy66:
	yych = *++YYCURSOR;
	if(yych == 'I') goto yy67;
	if(yych != 'i') goto yy54;
yy67:
	yych = *++YYCURSOR;
	if(yych == 'T') goto yy68;
	if(yych != 't') goto yy54;
yy68:
	yych = *++YYCURSOR;
	if(yych == 'E') goto yy69;
	if(yych != 'e') goto yy54;
yy69:
	yych = *++YYCURSOR;
	if(yych == 'R') goto yy70;
	if(yych != 'r') goto yy54;
yy70:
	yych = *++YYCURSOR;
	if(yych == 'S') goto yy71;
	if(yych != 's') goto yy54;
yy71:
	++YYCURSOR;
	{YYCURSOR = re2c_parseDelimiters(YYCURSOR); goto scanstart;}
}


scanend:
	return retval;
}

int GrammarParser::re2c_grammar_from_ufile(UFILE *input) {
	u_frewind(input);
	if (u_feof(input)) {
		u_fprintf(ux_stderr, "Error: Input is null - nothing to parse!\n");
		return -1;
	}
	if (!result) {
		u_fprintf(ux_stderr, "Error: No preallocated grammar provided - cannot continue!\n");
		return -1;
	}
	
	free_keywords();
	free_regexps();
	free_strings();

	int error = init_keywords();
	if (error) {
		u_fprintf(ux_stderr, "Error: init_keywords returned %u!\n", error);
		return error;
	}

	error = init_regexps();
	if (error) {
		u_fprintf(ux_stderr, "Error: init_regexps returned %u!\n", error);
		return error;
	}

	error = init_strings();
	if (error) {
		u_fprintf(ux_stderr, "Error: init_strings returned %u!\n", error);
		return error;
	}

	UChar *buffer = new UChar[result->grammar_size+8];
	memset(buffer, 0, sizeof(UChar)*(result->grammar_size+8));
	u_file_read(buffer, result->grammar_size, input);
	
	UChar *offset = buffer;
	re2c_scan(offset);
	
	delete buffer;
	free_regexps();
	free_strings();

	return 0;
}
