/*
 * Copyright (C) 2006, GrammarSoft Aps
 * and the VISL project at the University of Southern Denmark.
 * All Rights Reserved.
 *
 * The contents of this file are subject to the GrammarSoft Public
 * License Version 1.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.grammarsoft.com/GSPL or
 * http://visl.sdu.dk/GSPL.txt
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 */

#include "stdafx.h"
#include "Strings.h"
#include <unicode/uregex.h>
#include "GrammarParser.h"
#include "Grammar.h"
#include "uextras.h"
#include <sys/stat.h>

using namespace CG3;
using namespace CG3::Strings;

/*!re2c
newline = [\n\u2028\u2029\x85\x0C];
space = [ \t\r];
any = [^];
*/

KEYWORDS GrammarParser::scan(YYCTYPE *input) {
	#define YYCURSOR        input
	#define YYLIMIT         input
	#define YYFILL(n)
	YYCTYPE *YYMARKER = 0;
	KEYWORDS retval = K_IGNORE;

scanstart:

/*!re2c
		[\u0000]		{return K_IGNORE;}
        'DELIMITERS'	{retval = K_DELIMITERS; goto scanend;}
        'SETS'			{retval = K_SETS; goto scanend;}
        'SET'			{retval = K_SET; goto scanend;}
        'LIST'			{retval = K_LIST; goto scanend;}
        '#'				{goto scanstart;}
        space			{goto scanstart;}
        newline			{result->lines++; goto scanstart;}
		any				{goto scanstart;}
*/
scanend:
	return retval;
}

int GrammarParser::re2c_grammar_from_ufile(UFILE *input) {
	u_frewind(input);
	if (u_feof(input)) {
		u_fprintf(ux_stderr, "Error: Input is null - nothing to parse!\n");
		return -1;
	}
	if (!result) {
		u_fprintf(ux_stderr, "Error: No preallocated grammar provided - cannot continue!\n");
		return -1;
	}
	
	free_keywords();
	free_regexps();
	free_strings();

	int error = init_keywords();
	if (error) {
		u_fprintf(ux_stderr, "Error: init_keywords returned %u!\n", error);
		return error;
	}

	error = init_regexps();
	if (error) {
		u_fprintf(ux_stderr, "Error: init_regexps returned %u!\n", error);
		return error;
	}

	error = init_strings();
	if (error) {
		u_fprintf(ux_stderr, "Error: init_strings returned %u!\n", error);
		return error;
	}

	UChar *buffer = new UChar[result->grammar_size+1];
	memset(buffer, 0, sizeof(UChar)*(result->grammar_size+1));
	u_file_read(buffer, result->grammar_size, input);
	
	KEYWORDS type = K_IGNORE;
	UChar *offset = buffer;
	while (offset[0] && (type = scan(offset)) != K_IGNORE) {
		printf("Type: %i\n", type);
		offset += u_strlen(keywords[type]);
	}
	
	delete buffer;
	free_regexps();
	free_strings();

	return 0;
}
