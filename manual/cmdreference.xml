<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter SYSTEM "docbook-dtd-45/docbookx.dtd">

<chapter id="cmdreference">
  <title>Command Line Reference</title>

  <para>
    A list of binaries available and their usage information.
  </para>

  <section id="vislcg3">
    <title>vislcg3</title>
    <para>
      vislcg3 is the primary binary. It can run rules, compile grammars, and so on.
    </para>
    <screen>
Usage: vislcg3 [OPTIONS]

Options:
 -h, --help                shows this help
 -?, --?                   shows this help
 -V, --version             prints copyright and version information
 -g, --grammar             specifies the grammar file to use for disambiguation
     --grammar-out         writes the compiled grammar in textual form to a file
     --grammar-bin         writes the compiled grammar in binary form to a file
     --grammar-only        only compiles the grammar; implies --verbose
     --ordered             allows multiple identical tags (will in future allow full ordered matching)
 -u, --unsafe              allows the removal of all readings in a cohort, even the last one
 -s, --sections            number or ranges of sections to run; defaults to all sections
     --rules               number or ranges of rules to run; defaults to all rules
     --rule                a name or number of a single rule to run
 -d, --debug               enables debug output (very noisy)
 -v, --verbose             increases verbosity
 -2, --vislcg-compat       enables compatibility mode for older CG-2 and vislcg grammars
 -I, --stdin               file to print output to instead of stdout
 -O, --stdout              file to read input from instead of stdin
 -E, --stderr              file to print errors to instead of stderr
 -C, --codepage-all        codepage to use for grammar, input, and output streams; defaults to environment settings
     --codepage-grammar    codepage to use for grammar; overrides --codepage-all
     --codepage-input      codepage to use for input; overrides --codepage-all
     --codepage-output     codepage to use for output and errors; overrides --codepage-all
 -L, --locale-all          locale to use for grammar, input, and output streams; defaults to en_US_POSIX
     --locale-grammar      locale to use for grammar; overrides --locale-all
     --locale-input        locale to use for input; overrides --locale-all
     --locale-output       locale to use for output and errors; overrides --locale-all
     --no-mappings         disables all MAP, ADD, and REPLACE rules
     --no-corrections      disables all SUBSTITUTE and APPEND rules
     --no-before-sections  disables all rules in BEFORE-SECTIONS parts
     --no-sections         disables all rules in SECTION parts
     --no-after-sections   disables all rules in AFTER-SECTIONS parts
 -t, --trace               prints debug output alongside with normal output
     --trace-name-only     if a rule is named, omit the line number; implies --trace
     --trace-no-removed    does not print removed readings; implies --trace
     --trace-encl          traces which enclosure pass is currently happening; implies --trace
     --single-run          runs each section only once; same as --max-runs 1
     --max-runs            runs each section max N times; defaults to unlimited (0)
 -S, --statistics          gathers profiling statistics while applying grammar
 -Z, --optimize-unsafe     destructively optimize the profiled grammar to be faster
 -z, --optimize-safe       conservatively optimize the profiled grammar to be faster
 -p, --prefix              sets the mapping prefix; defaults to @
     --unicode-tags        outputs Unicode code points for things like -&gt;
     --num-windows         number of windows to keep in before/ahead buffers; defaults to 2
     --always-span         forces scanning tests to always span across window boundaries
     --soft-limit          number of cohorts after which the SOFT-DELIMITERS kick in; defaults to 300
     --hard-limit          number of cohorts after which the window is forcefully cut; defaults to 500
 -D, --dep-delimit         delimit windows based on dependency instead of DELIMITERS; defaults to 10
     --dep-humanize        forces enumeration of dependencies to human-readable; will not be valid for chained CG-3s
     --dep-original        outputs the original input dependency tag even if it is no longer valid
     --dep-allow-loops     allows the creation of circular dependencies
     --dep-no-crossing     prevents the creation of dependencies that would result in crossing branches
     --no-magic-readings   prevents running rules on magic readings
 -o, --no-pass-origin      prevents scanning tests from passing the point of origin
 -e, --show-end-tags       allows the &lt;&lt;&lt; tags to appear in output
     --show-unused-sets    prints a list of unused sets and their line numbers; implies --grammar-only
     --show-tag-hashes     prints a list of tags and their hashes as they are parsed during the run
     --show-set-hashes     prints a list of sets and their hashes; implies --grammar-only
    </screen>
  </section>

  <section id="cg-conv">
    <title>cg-conv</title>
    <para>
      cg-conv converts between the <link linkend="streamformats">Apertium and VISL CG stream formats</link>.
      By default it converts from VISL CG to Apertium, but option -a inverses that.
      Currently only meant for use in a pipe.
    </para>
    <screen>
USAGE: cg-conv [-a] [-l]

Options:
 -a, --a2v:    convert from Apertium to VISL format
 -l, --ltr:    sub-reading direction LTR instead of default RTL (only with -a)
    </screen>
  </section>

  <section id="cg-comp">
    <title>cg-comp</title>
    <para>
      cg-comp is a lighter tool that only compiles grammars to their binary form.
      It requires grammars to be in Unicode (UTF-8) encoding.
      Made for the Apertium toolchain.
    </para>
    <screen>
USAGE: cg-comp grammar_file output_file
    </screen>
  </section>

  <section id="cg-proc">
    <title>cg-proc</title>
    <para>
      cg-proc is a grammar applicator which can handle the Apertium stream format.
      It works with binary grammars only, hence the need for cg-comp.
      It requires the input stream to be in Unicode (UTF-8) encoding.
      Made for the Apertium toolchain.
    </para>
    <screen>
USAGE: cg-proc [-t] [-s] [-d] grammar_file [input_file [output_file]]

Options:
 -d, --disambiguation:    morphological disambiguation
 -s, --sections=NUM:      specify number of sections to process
 -f, --stream-format=NUM: set the format of the I/O stream to NUM,
                            where `0' is VISL format and `1' is
                            Apertium format (default: 1)
 -t, --trace:             print debug output on stderr
 -v, --version:           version
 -h, --help:              show this help
    </screen>
  </section>

  <section id="cg3-autobin.pl">
    <title>cg3-autobin.pl</title>
    <para>
      A thin Perl wrapper for vislcg3. It will compile the grammar to binary form the first time and re-use that on
      subsequent runs for the speed boost. Accepts all command line options that vislcg3 does.
    </para>
  </section>
</chapter>
