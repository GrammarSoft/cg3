<refentry xmlns:src="http://nwalsh.com/xmlns/litprog/fragment"
          xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
          id="man.string.subst.map">
<refmeta>
<refentrytitle>man.string.subst.map</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.string.subst.map</refname>
<refpurpose>Specifies a set of string substitutions</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id='man.string.subst.map.frag'>
<xsl:param name="man.string.subst.map">

  <!-- ******************************************************************** -->
  <!-- *  -->
  <!-- * The backslash and dot (\, .) characters have special meaning -->
  <!-- * for roff, so we escape those characters when they appear in -->
  <!-- * the source content, and we use certain (arbitrarily -->
  <!-- * selected) Unicode characters as the internal representations -->
  <!-- * for those characters, then replace them with real -->
  <!-- * backslashes and dots in output. In addition, for certain -->
  <!-- * reasons, we do the same thing for dashes. The mappings of -->
  <!-- * those characters to the Unicode characters we use to -->
  <!-- * represent them is hard-coded: -->
  <!-- *  -->
  <!-- *   - U+2591 = dash -->
  <!-- *   - U+2593 = backslash -->
  <!-- *   - U+2302 = dot -->
  <!-- *  -->
  <!-- ******************************************************************** -->

  <!-- * escape backslashes in content; we use "\e" instead of "\\" -->
  <!-- * because the groff docs say that's the correct thing to do; also -->
  <!-- * because testing shows that "\\" doesn't always work as expected; -->
  <!-- * for example, "\\" within a table seems to mess things up -->
  <substitution oldstring="\" newstring="\e"/>
  <!-- * fix bad font-request capitalization in .SH (stylesheet artifact) -->
  <substitution oldstring="&#x2593;FB" newstring="\fB"/>
  <substitution oldstring="&#x2593;FI" newstring="\fI"/>
  <substitution oldstring="&#x2593;FR" newstring="\fR"/>
  <!-- * remove no-break marker at beginning of line (stylesheet artifact) --> 
  <substitution oldstring="&#x2592;&#x2580;" newstring="&#x2592;"/>
  <!-- * replace U+2580 no-break marker (stylesheet-added) w/ no-break space -->
  <substitution oldstring="&#x2580;" newstring="\ "/>
  <!-- * replace U+2593 marker with backslash --> 
  <substitution oldstring="&#x2593;" newstring="\"/>
  <!-- * escape dashes in content (only at line beginnings) -->
  <substitution oldstring="&#10;." newstring="&#10;\&amp;."/>
  <!-- * replace U+2302 marker with dot -->
  <substitution oldstring="&#x2302;" newstring="."/>
  <!-- * escape dashes in content -->
  <substitution oldstring="-" newstring="\-"/>
  <!-- * replace U+2591 marker with dash -->
  <substitution oldstring="&#x2591;" newstring="-"/>

  <!-- ==================================================================== -->

  <!-- * squeeze multiple newlines before a roff request  -->
  <substitution oldstring="&#10;&#10;." newstring="&#10;."/>
  <!-- * remove any .sp occurences that directly follow a .PP  -->
  <substitution oldstring=".PP&#10;.sp" newstring=".PP"/>
  <!-- * squeeze multiple newlines after start of no-fill (verbatim) env. -->
  <substitution oldstring=".nf&#10;&#10;" newstring=".nf&#10;"/>
  <!-- * squeeze multiple newlines after REstoring margin -->
  <substitution oldstring=".RE&#10;&#10;" newstring=".RE&#10;"/>
  <!-- * an apostrophe at the beginning of a line gets interpreted as a -->
  <!-- * roff request (groff(7) says it is "the non-breaking control -->
  <!-- * character"); so we must add backslash before any apostrophe -->
  <!-- * found at the start of a line -->
  <substitution oldstring="&#10;'" newstring="&#10;\'"/>
  <!-- * -->
  <!-- * non-breaking space -->
  <!-- * -->
  <!-- * A no-break space can be written two ways in roff; the difference, -->
  <!-- * according to the "Page Motions" node in the groff info page, ixsl: -->
  <!-- * -->
  <!-- *   "\ " = -->
  <!-- *   An unbreakable and unpaddable (i.e. not expanded during filling) -->
  <!-- *   space. -->
  <!-- * -->
  <!-- *   "\~" = -->
  <!-- *   An unbreakable space that stretches like a normal -->
  <!-- *   inter-word space when a line is adjusted."  -->
  <!-- * -->
  <!-- * Unfortunately, roff seems to do some weird things with long -->
  <!-- * lines that only have words separated by "\~" spaces, so it's -->
  <!-- * safer just to stick with the "\ " space -->
  <substitution oldstring="&#x00a0;" newstring="\ "/>
  <!-- * x2008 is a "punctuation space"; we must replace it here because, -->
  <!-- * for certain reasons, the stylesheets add it before and after -->
  <!-- * every Parameter in Funcprototype output -->
  <substitution oldstring="&#x2008;" newstring=" "/>
  <!-- * -->
  <!-- * Now deal with some other characters that are added by the -->
  <!-- * stylesheets during processing. -->
  <!-- * -->
  <!-- * bullet -->
  <substitution oldstring="&#x2022;" newstring="\(bu"/>
  <!-- * left double quote -->
  <substitution oldstring="&#x201c;" newstring="\(lq"/>
  <!-- * right double quote -->
  <substitution oldstring="&#x201d;" newstring="\(rq"/>
  <!-- * left single quote -->
  <substitution oldstring="&#x2018;" newstring="\(oq"/>
  <!-- * right single quote -->
  <substitution oldstring="&#x2019;" newstring="\(cq"/>
  <!-- * copyright sign -->
  <substitution oldstring="&#x00a9;" newstring="\(co"/>
  <!-- * registered sign -->
  <substitution oldstring="&#x00ae;" newstring="\(rg"/>
  <!-- * servicemark... -->
  <!-- * There is no groff equivalent for it. -->
  <substitution oldstring="&#x2120;" newstring="(SM)"/>
  <!-- * trademark... -->
  <!-- * We don't do "\(tm" because for console output, -->
  <!-- * groff just renders that as "tm"; that is: -->
  <!-- * -->
  <!-- *   Product&#x2122; -> Producttm -->
  <!-- * -->
  <!-- * So we just make it to "(TM)" instead; thus: -->
  <!-- * -->
  <!-- *   Product&#x2122; -> Product(TM) -->
  <substitution oldstring="&#x2122;" newstring="(TM)"/>

  <!-- ==================================================================== -->

  <!-- * we use U+2592 as a marker for the newline before output of <sbr>; -->
  <!-- * so we now need to replace U+2592 marker with a real newline -->
  <substitution oldstring="&#x2592;" newstring="&#10;"/>

</xsl:param>
</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>The <parameter>man.string.subst.map</parameter> parameter
contains <link linkend="map">a map</link> that specifies a set of
string substitutions to perform over the entire roff source for each
man page, either just before generating final man-page output (that
is, before writing man-page files to disk) or, if the value of the
<parameter>man.charmap.enabled</parameter> parameter is non-zero,
before applying the roff character map.</para>

<para>You can use <parameter>man.string.subst.map</parameter> as a
“lightweight” character map to perform “essential” substitutions --
that is, substitutions that are <emphasis>always</emphasis> performed,
even if the value of the <parameter>man.charmap.enabled</parameter>
parameter is zero. For example, you can use it to replace quotation
marks or other special characters that are generated by the DocBook
XSL stylesheets for a particular locale setting (as opposed to those
characters that are actually in source XML documents), or to replace
any special characters that may be automatically generated by a
particular customization of the DocBook XSL stylesheets.</para>

<warning>
  <para>Do you not change value of the
  <parameter>man.string.subst.map</parameter> parameter unless you are
  sure what you are doing. First consider adding your
  string-substitution mappings to either or both of the following
  parameters:
  <variablelist>
    <varlistentry>
      <term><parameter>man.string.subst.map.local.pre</parameter></term>
      <listitem><para>applied before
      <parameter>man.string.subst.map</parameter></para></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>man.string.subst.map.local.post</parameter></term>
      <listitem><para>applied after
      <parameter>man.string.subst.map</parameter></para></listitem>
    </varlistentry>
  </variablelist>
  By default, both of those parameters contain no
  string substitutions. They are intended as a means for you to
  specify your own local string-substitution mappings.</para>

  <para>If you remove any of default mappings from the value of the
  <parameter>man.string.subst.map</parameter> parameter, you are
  likely to end up with broken output. And be very about adding
  anything to it; it’s used for doing string substitution over the
  entire roff source of each man page – it causes target strings to be
  replaced in roff requests and escapes, not just in the visible
  contents of the page.</para>

</warning>

<refsect2 id="map">
  <title>Contents of the substitution map</title>
  <para>The string-substitution map contains one or more <tag
  namespace="http://docbook.sf.net/xmlns/string.subst/1.0"
  >substitution</tag> elements, each of which has two attributes:
  <variablelist>
    <varlistentry>
      <term>oldstring</term>
      <listitem>
        <simpara>string to replace</simpara>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>newstring</term>
      <listitem>
        <simpara>string with which to replace <tag class="attribute"
        >oldstring</tag></simpara>
      </listitem>
    </varlistentry>
  </variablelist>
  It may also include XML comments (that is, delimited with
  "<literal>&lt;!--</literal>" and "<literal>--></literal>").
  </para>
</refsect2>

<refsect2 id="escape-replace">
  <title>About escaping and replacing backslash, dot, and dash</title>
  <para>The backslash and dot (\, .) characters have special meaning
  for roff, so we:

  <itemizedlist>
    <listitem>
      <para>escape backslashes and dots where they appear in the
      source content</para>
    </listitem>
    <listitem>
      <para>use certain (arbitrarily selected) Unicode characters as
      “markers” – internal representations within the stylesheet – for
      backslashes and dots</para>
    </listitem>
    <listitem>
      <para>replace the Unicode characters with real backslashes and
      dotes before output gets serialized</para>
    </listitem>
  </itemizedlist>
  
   In addition, for certain reasons, we do the same thing for
   dashes.</para>

  <para>The mappings of dash, backslash, and dot to the Unicode
  characters we use to represent them is hard-coded in the stylesheet:

  <itemizedlist>
    <listitem><para><literal>U+2591</literal> = dash</para></listitem>
    <listitem><para><literal>U+2593</literal> = backslash</para></listitem>
    <listitem><para><literal>U+2302</literal> = dot</para></listitem>
  </itemizedlist>

  Those Unicode characters were chosen on the assumption that they are
  never used in content intended for output to man pages. It would be
  possible to provide a way for configuring the mappings (using XSLT
  parameters), but doing so would make the stylesheet code much more
  verbose and harder to read.</para>
</refsect2>

</refsect1>
</refentry>
