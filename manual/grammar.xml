<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter SYSTEM "docbook-dtd-45/docbookx.dtd">

<chapter id="grammar">
  <title>Grammar</title>

  <section id="reopen-mappings">
    <title>REOPEN-MAPPINGS</title>
    <para>
      A list of mapping tags that ADD/MAP/REPLACE should be able to operate on even though they were present on readings
      in the input stream.
    </para>
    <screen>
      REOPEN-MAPPINGS = @a @b @c ;
    </screen>
  </section>

  <section id="grammar-options">
    <title>OPTIONS</title>
    <para>
      You can affect how the grammar should be parsed with <code>OPTIONS += ... ;</code>.
      Currently options can only be added, hence <code>+=</code>, but removing and assignment can be implemented if needed.
    </para>
    <screen>
      OPTIONS += no-inline-templates ;
    </screen>

    <section id="grammar-options-noisets">
      <title>no-inline-sets</title>
      <indexterm>
        <primary>no-inline-sets</primary>
      </indexterm>
      <para>
        Disallows the use of inline sets in most places. They're still allowed in places that CG-2 did not consider sets,
        such as MAP, ADD, REPLACE, and ADDCOHORT tag lists, and in the context of a SET definition.
        Also, the special set (*) remains valid.
      </para>
    </section>

    <section id="grammar-options-noitmpls">
      <title>no-inline-templates</title>
      <indexterm>
        <primary>no-inline-templates</primary>
      </indexterm>
      <para>
        Disallows the use of inline templates in most places. They're still allowed in the context of a TEMPLATE definition.
      </para>
    </section>

    <section id="grammar-options-strict-wforms">
      <title>strict-wordforms</title>
      <indexterm>
        <primary>strict-wordforms</primary>
      </indexterm>
      <para>
        Instructs STRICT-TAGS to forbid all wordform tags (<code>"&lt;…&gt;"</code>) by default.
      </para>
    </section>

    <section id="grammar-options-strict-bforms">
      <title>strict-baseforms</title>
      <indexterm>
        <primary>strict-baseforms</primary>
      </indexterm>
      <para>
        Instructs STRICT-TAGS to forbid all baseform tags (<code>"…"</code>) by default.
      </para>
    </section>

    <section id="grammar-options-strict-second">
      <title>strict-secondary</title>
      <indexterm>
        <primary>strict-secondary</primary>
      </indexterm>
      <para>
        Instructs STRICT-TAGS to forbid all secondary tags (<code>&lt;…&gt;</code>) by default.
      </para>
    </section>

    <section id="grammar-options-strict-regex">
      <title>strict-regex</title>
      <indexterm>
        <primary>strict-regex</primary>
      </indexterm>
      <para>
        Instructs STRICT-TAGS to forbid all regular expression tags (<code>/…/r</code> and others) by default.
      </para>
    </section>

    <section id="grammar-options-strict-icase">
      <title>strict-icase</title>
      <indexterm>
        <primary>strict-icase</primary>
      </indexterm>
      <para>
        Instructs STRICT-TAGS to forbid all case-insensitive tags by default.
      </para>
    </section>

    <section id="grammar-options-self-no-barrier">
      <title>self-no-barrier</title>
      <indexterm>
        <primary>self-no-barrier</primary>
      </indexterm>
      <para>
        Inverts the behavior of barriers on self tests. By default, barriers will stop if the self cohort matches.
        This can be toggled on a per context basis with modifier <link linkend="dep-ct-no-barrier">N</link>,
        where self-no-barrier inverts the behavior of S vs. SN.
      </para>
    </section>
  </section>

  <section id="grammar-include">
    <title>INCLUDE</title>
    <para>
      <link linkend="keyword-include">INCLUDE</link> loads and parses another grammar file as if it had been pasted
      in on the line of the INCLUDE statement, with the exception that line numbers start again from 1.
      Included rules can thus conflict with rules in other files if they happen to occupy the same line in multiple files.
      It will still work as you expect, but --trace output won't show you which file the rules come from.
      <screen>
        INCLUDE other-file-name ;
      </screen>
      The file name should not be quoted and the line must end with semi-colon.
      The include candidate will be looked for at a path relative to the file performing the include.
      Be careful not to make circular includes as they will loop forever.
    </para>
  </section>

  <section id="grammar-sections">
    <title>Sections</title>
    <para>
      <indexterm>
        <primary>SECTION</primary>
      </indexterm>
      <indexterm>
        <primary>BEFORE-SECTIONS</primary>
      </indexterm>
      <indexterm>
        <primary>AFTER-SECTIONS</primary>
      </indexterm>
      <indexterm>
        <primary>NULL-SECTION</primary>
      </indexterm>
      <indexterm>
        <primary>MAPPINGS</primary>
      </indexterm>
      <indexterm>
        <primary>SETS</primary>
      </indexterm>
      <indexterm>
        <primary>CORRECTIONS</primary>
      </indexterm>
      <indexterm>
        <primary>CONSTRAINTS</primary>
      </indexterm>
      CG-2 has three seperate grammar sections: <link linkend="keyword-sets">SETS</link>,
      <link linkend="keyword-mappings">MAPPINGS</link>,
      and <link linkend="keyword-constraints">CONSTRAINTS</link>.
      VISLCG added to these with the <link linkend="keyword-corrections">CORRECTIONS</link> section.
      Each of these can only contain certain definitions, such as LIST, MAP, or SELECT.
      As I understand it, this was due to the original CG parser being written in a language
      that needed such a format. In any case, I did not see the logic or usability in
      such a strict format. VISL CG-3 has a single section header
      <link linkend="keyword-section">SECTION</link>, which can contain
      any of the set or rule definitions. Sections can also be given a name for easier
      identification and anchor behavior, but that is optional. The older section
      headings are still valid and will work as expected, though.
    </para>
    <para>
      By allowing any set or rule definition anywhere you could write a grammar such as:
      <screen>
        DELIMITERS = "&lt;$.&gt;" ;
        LIST ThisIsASet = "&lt;sometag&gt;" "&lt;othertag&gt;" ;

        SECTION
        LIST ThisIsAlsoASet = atag btag ctag ;
        SET Hubba = ThisIsASet - (ctag) ;
        SELECT ThisIsASet IF (-1 (dtag)) ;

        SECTION with-name;
        LIST AnotherSet =  "&lt;youknowthedrill&gt;" ;
        MAP (@bingo) TARGET AnotherSet ;
      </screen>
    </para>
    <para>
      Notice that the first LIST ThisIsASet is outside a section.
      This is because sets are considered global regardless of where
      they are declared and can as such be declared anywhere, even before the
      DELIMITERS declaration should you so desire. A side effect of this is
      that set names must be unique across the entire grammar, but as this is
      also the behavior of CG-2 and VISLCG that should not be a surprise nor problem.
    </para>
    <para>
      Rules are applied in the order they are declared. In the above example
      that would execute SELECT first and then the MAP rule.
    </para>

    <section id="grammar-before-sections">
      <title>BEFORE-SECTIONS</title>
      <para>
        See <link linkend="keyword-before-sections">BEFORE-SECTIONS</link>.
        Takes the place of what previously were the MAPPINGS and CORRECTIONS blocks,
        but may contain any rule type.
      </para>
    </section>

    <section id="grammar-section">
      <title>SECTION</title>
      <para>
        See <link linkend="keyword-section">SECTION</link>.
        Takes the place of what previously were the CONSTRAINTS blocks,
        but may contain any rule type.
      </para>
    </section>

    <section id="grammar-after-sections">
      <title>AFTER-SECTIONS</title>
      <para>
        See <link linkend="keyword-after-sections">AFTER-SECTIONS</link>.
        May contain any rule type, and is run once after all other sections.
        This is new in CG-3.
      </para>
    </section>

    <section id="grammar-null-section">
      <title>NULL-SECTION</title>
      <para>
        See <link linkend="keyword-null-section">NULL-SECTION</link>.
        May contain any rule type, but is not actually run.
        This is new in CG-3.
      </para>
    </section>

    <section id="grammar-section-order">
      <title>Ordering of sections in grammar</title>
      <para>
        The order and arrangement of BEFORE-SECTIONS and AFTER-SECTIONS in the grammar has no impact on the
        order normal SECTIONs are applied in.
      </para>
      <para>
        An order of
        <screen>
          SECTION
          SECTION
          BEFORE-SECTIONS
          SECTION
          NULL-SECTION
          AFTER-SECTIONS
          SECTION
          BEFORE-SECTIONS
          SECTION
        </screen>
        is equivalent to
        <screen>
          BEFORE-SECTIONS
          SECTION
          SECTION
          SECTION
          SECTION
          SECTION
          AFTER-SECTIONS
          NULL-SECTION
        </screen>
      </para>
    </section>

    <section id="sections-range">
      <title>--sections with ranges</title>
      <para>
        In VISL CG-3, the --sections flag is able to specify ranges of sections to run, and can even be used to skip
        sections. If only a single number N is given it behaves as if you had written 1-N.
      </para>
      <para>
        While it is possible to specify a range such as 1,4-6,3 where the selection of sections is not ascending, the actual
        application order will be 1, 1:4, 1:4:5, 1:4:5:6, 1:3:4:5:6 - that is, the final step will run section 3 in between
        1 and 4. This is due to the ordering of rules being adamantly enforced as ascending only. If you wish to customize
        the order of rules you will currently have to use JUMP or EXECUTE.
      </para>
      <screen>
        --sections 6
        --sections 3-6
        --sections 2-5,7-9,13-15
      </screen>
    </section>

  </section>

</chapter>
