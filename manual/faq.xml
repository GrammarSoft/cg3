<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter SYSTEM "docbook-dtd-45/docbookx.dtd">

<chapter id="faq">
  <title>FAQ &amp; Tips &amp; Tricks</title>

  <section id="faq-faq">
    <title>FAQ</title>

    <section id="faq-careful-scan">
      <title>How far will a <code>(*-1C A)</code> test scan?</title>
      
      <para>
        The CG-2 spec dictates that for a test <code>(*-1C A)</code>:
        "There is a cohort to the left containing a reading which has a tag belonging to the set A.
        The <emphasis>first such cohort</emphasis> must have a tag belonging to the set A in all its readings."
        ...meaning scanning stops at the first A regardless of whether it is carefully A.
        To scan further than the first A you must use **.
      </para>
      <para>
        VISLCG2 was not compliant with that and would scan until it found a "careful A".
        This caused the need for ugly hacks such as <code>(*1C A BARRIER A)</code> to emulate the correct behavior.
      </para>
      <para>
        See <ulink url="http://groups.google.com/group/constraint-grammar/browse_thread/thread/45a00e1ea99bc4ad">this reference thread</ulink>.
      </para>
    </section>

    <section id="faq-matching-asterisk">
      <title>How can I match the tag <code>*</code> from my input?</title>
      
      <para>
        You can't. The single <code>*</code> symbol is reserved for many special meanings in CG-3.
        I suggest replacing it with <code>**</code> or <code>&lt;*&gt;</code> or anything that isn't
        a single <code>*</code> if you need to work with it in CG.
      </para>
    </section>
  </section>

  <!-- section id="faq-tips">
    <title>Tips</title>

    <section id="faq-tips-TODO">
      <title>Tips TODO</title>
    </section>
  </section -->

  <section id="faq-tricks">
    <title>Tricks</title>

    <section id="faq-multi-base-forms">
      <title>Determining whether a cohort has (un)ambiguous base forms</title>
      
      <para>
        If you for whatever reason need to determine whether a cohort has readings with (un)ambiguous base forms,
        the following is how:
      </para>
      <screen>
        LIST bform = ".*"r ;
        
        # Determines ambiguous base forms
        ADD (@baseform-diff) $$bform (0 (*) - $$bform) ;
        
        # ...so NEGATE to determine unambigious base forms
        ADD (@baseform-same) $$bform (NEGATE 0 (*) - $$bform) ;
      </screen>
    </section>

    <section id="faq-default-parent-root">
      <title>Attach all cohorts without a parent to the root</title>
      
      <para>
        A final cleanup step of many dependency grammars is to attach anything that was not assigned a parent to the
        root of the window. This can be done easily with:
      </para>
      <screen>
        # For all cohorts that has no parent, attach to 0th cohort
        SETPARENT (*) (NEGATE p (*)) TO (@0 (*)) ;
      </screen>
    </section>

    <section id="faq-barrier-multiple-cohorts">
      <title>Use multiple cohorts as a barrier</title>
      
      <para>
        The BARRIER and CBARRIER behavior may only refer to a single cohort, but often you want to stop because of
        a condition expressed in multiple cohorts. This can be solved in a flat manner via MAP, ADD, or SUBSTITUTE.
      </para>
      <screen>
        ADD (¤list) Noun (1 Comma) ;
        SELECT Noun (-1* Adj BARRIER (¤list)) ;
      </screen>
    </section>

    <section id="faq-add-delimiter-cohort">
      <title>Add a delimiting cohort</title>
      
      <para>
        ADDCOHORT can be used to add any type of cohort, including delimiter ones. But it will not automatically delimit
        the window at such a cohort, so you need to add a DELIMIT rule after if that is your intended outcome.
        Just be mindful that DELIMIT will restart the grammar, so ADDCOHORT may fire again causing an endless loop;
        break it by conditioning ADDCOHORT, such as
      </para>
      <screen>
        ADDCOHORT ("§") AFTER (@title-end) IF (NOT 1 (&lt;&lt;&lt;)) ;
        DELIMIT _S_DELIMITERS_ ; # Use the magic set that contains what DELIMITERS defined
      </screen>
    </section>
  </section>

</chapter>
